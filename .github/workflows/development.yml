name: Development workflow example

on:
  workflow_call:
    inputs:
      php:
        required: true
        type: string
      mysql:
        required: true
        type: string
      module_codecept_test_group:
        type: string
        default: 'oe_moduletemplate'
      report_sonarcloud:
        type: boolean
        default: false

jobs:
  install_shop_with_module:
    runs-on: ubuntu-latest
    steps:
      - name: Cache current installation
        uses: actions/cache@v4
        with:
          path: |
            ./*
          key: installation-${{ join(inputs.*, '-') }}-${{ github.run_number }}-${{ github.run_attempt }}

      - name: Clone testing environment
        run: git clone https://github.com/OXID-eSales/docker-eshop-sdk.git .

      - name: Prepare container configuration and start containers
        run: |
          mkdir source
          make setup
          make addbasicservices
          make file=services/selenium-chrome.yml addservice
          perl -pi\
            -e 's#PHP_VERSION=.*#PHP_VERSION=${{ inputs.php }}#g;'\
            -e "s#MYSQL_VERSION=.*#MYSQL_VERSION=${{ inputs.mysql }}#g;"\
            .env
          perl -pi\
            -e 's#display_errors =.*#display_errors = false#g;'\
            -e 's#error_reporting = .*#error_reporting = E_ALL ^ E_WARNING ^ E_DEPRECATED#g;'\
            -e 'print "xdebug.max_nesting_level=1000\nxdebug.mode=coverage\n\n"'\
            containers/php/custom.ini
          perl -pi\
            -e 's#/var/www/#/var/www/source/#g;'\
            containers/httpd/project.conf
          docker compose up --build -d php
          sleep 2

      - name: Checkout current module
        uses: actions/checkout@v4
        with:
          path: source/test-module

      - name: Configure basic CE component
        run: |
          wget -O source/composer.json  https://raw.githubusercontent.com/OXID-eSales/docker-eshop-sdk-recipes/master-new_ce_recipe-OXDEV-7845/parts/bases/composer.json.base
          docker compose exec -T php composer require oxid-esales/oxideshop-ce:dev-b-7.1.x --no-interaction --no-update
          docker compose exec -T php composer require oxid-esales/twig-admin-theme:dev-b-7.1.x --no-interaction --no-update
          docker compose exec -T php composer require oxid-esales/apex-theme:dev-b-7.1.x --no-interaction --no-update

      - name: Clone and configure module requirement
        run: |
          docker compose exec -T \
            php composer config repositories.oxid-esales/module-template \
            --json '{"type":"path", "url":"./test-module", "options": {"symlink": true}}'
          docker compose exec -T \
            php composer require oxid-esales/module-template:* --no-interaction --no-update

      - name: What do we have?
        if: always()
        run: |
          cat source/composer.json

      - name: Install dependencies and reset shop
        run: |
          docker compose exec -T php composer update --no-interaction
          docker compose exec -T php vendor/bin/oe-eshop-doctrine_migration migrations:migrate

      - name: Start all other not running containers in advance
        run: |
          make up
          sleep 2

      - name: Setup shop and activate modules/themes
        run: |
          docker compose exec php vendor/bin/oe-console oe:setup:shop --db-host=mysql --db-port=3306 --db-name=example --db-user=root \
            --db-password=root --shop-url=http://localhost.local/ --shop-directory=/var/www/source/ \
            --compile-directory=/var/www/source/tmp/

          docker compose exec -T php vendor/bin/oe-console oe:theme:activate apex
          docker compose exec -T php vendor/bin/oe-console oe:module:activate oe_moduletemplate

      - name: Install module dependencies
        run: |
          docker compose exec -T \
            --workdir=/var/www/test-module \
            php composer install

      - name: Run styles tests
        if: always()
        run: |
          docker compose exec -T \
            --workdir=/var/www/test-module \
            php composer static

      - name: Run unit tests
        if: always()
        run: |
          docker compose exec -T \
            --workdir=/var/www/test-module \
            php composer tests-coverage

      - name: Run codeception tests
        if: always()
        run: |
          docker compose exec -T \
            --workdir=/var/www/test-module \
            php composer tests-codeception

      - name: Show docker log
        if: always()
        run: |
          docker compose logs
